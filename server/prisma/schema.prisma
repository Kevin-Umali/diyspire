// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HowToGuide {
  id         Int      @id @default(autoincrement())
  path       String   @unique
  metadata   Metadata @relation(fields: [metadataId], references: [id])
  metadataId Int      @unique
  content    String   @db.Text
}

model Metadata {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  imageUrl    String?
  howToGuide  HowToGuide?
}

model IdeaGenerationCounter {
  id        Int      @id @default(autoincrement())
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id               String            @id @default(uuid())
  slug             String?           @unique
  projectDetails   ProjectDetails    @relation(fields: [projectDetailsId], references: [id])
  projectDetailsId Int               @unique
  projectImage     ProjectImage      @relation(fields: [projectImageId], references: [internalId])
  projectImageId   Int
  explanation      String?
  createdAt        DateTime          @default(now())
  accountProjects  AccountProjects[]
}

model ProjectDetails {
  id          Int      @id @default(autoincrement())
  title       String
  materials   String[]
  tools       String[]
  time        String
  budget      String
  tags        String[]
  description String
  project     Project?
}

model ProjectImage {
  internalId      Int        @id @default(autoincrement())
  id              String     @unique
  width           Int
  height          Int
  color           String
  alt_description String
  urls            ImageURLs  @relation(fields: [urlsId], references: [id])
  urlsId          Int        @unique
  links           ImageLinks @relation(fields: [linksId], references: [id])
  linksId         Int        @unique
  user            User       @relation(fields: [userId], references: [id])
  userId          Int        @unique
  projects        Project[]
}

model ImageURLs {
  id       Int           @id @default(autoincrement())
  raw      String
  full     String
  regular  String
  small    String
  thumb    String
  small_s3 String
  image    ProjectImage?
}

model ImageLinks {
  id                Int           @id @default(autoincrement())
  self              String
  html              String
  download          String
  download_location String
  image             ProjectImage?
}

model User {
  id       Int           @id @default(autoincrement())
  username String        @unique
  name     String
  link     String
  images   ProjectImage?
}

model Account {
  id                String             @id @default(uuid())
  username          String             @unique
  password          String
  banned            Boolean            @default(false)
  refreshTokens     RefreshToken[]
  accountProjects   AccountProjects[]
  profile           Profile?           @relation(fields: [profileId], references: [id])
  profileId         Int?               @unique
  notifications     Notification?
  emailSubscription EmailSubscription?
}

model AccountProjects {
  accountId String
  projectId String
  account   Account @relation(fields: [accountId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@id([accountId, projectId])
}

model RefreshToken {
  id         Int         @id @default(autoincrement())
  token      String      @unique
  accountId  String
  account    Account     @relation(fields: [accountId], references: [id], map: "Custom_FK_Name")
  deviceInfo DeviceInfo?
  expiresAt  DateTime
}

model DeviceInfo {
  id             Int          @id @default(autoincrement())
  isMobile       Boolean
  isDesktop      Boolean
  isBot          Boolean
  browser        String
  version        String
  os             String
  platform       String
  refreshTokenId Int          @unique
  refreshToken   RefreshToken @relation(fields: [refreshTokenId], references: [id], onDelete: Cascade)
}

model EmailSubscription {
  id          Int      @id @default(autoincrement())
  address     String   @unique
  unsubscribe Boolean  @default(false)
  accountId   String?  @unique
  account     Account? @relation(fields: [accountId], references: [id])
}

model GeneratedMonthlyDIY {
  name      String   @unique
  createdAt DateTime @default(now())
}

model RateLimiterFlexible {
  key    String    @id
  points Int
  expire DateTime?
}

model Profile {
  id       Int      @id @default(autoincrement())
  fullName String
  email    String   @unique
  account  Account?
}

model Notification {
  id                  Int     @id @default(autoincrement())
  isNewsletterEnabled Boolean @default(false)
  isUpdatesEnabled    Boolean @default(false)
  accountId           String  @unique
  account             Account @relation(fields: [accountId], references: [id])
}
